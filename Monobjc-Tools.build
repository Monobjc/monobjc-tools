<?xml version="1.0"?>
<project name="Monobjc Tools" default="build" basedir=".">
  <description>Monobjc Tools Build File</description>

  <!-- Define some properties if they are missing -->
  <property name="build.dir" value="${path::get-full-path('./build')}" unless="${property::exists('build.dir')}"/>
  <property name="dist.dir" value="${path::get-full-path('./dist')}" unless="${property::exists('dist.dir')}"/>
  <property name="binaries.dir" value="${dist.dir}" unless="${property::exists('binaries.dir')}"/>
  <property name="testing" value="false" unless="${property::exists('testing')}"/>
  <property name="embedded.dir" value="Monobjc.Tools/Embedded" />

  <!-- ===============================================================================
  Update the runtime files
  ================================================================================ -->
  <target name="update" depends="prepare">

    <!-- Create/Embed header file -->
    <property name="src.file" value="${binaries.dir}/monobjc.h"/>
    <property name="dst.file" value="${embedded.dir}/monobjc.h" />
    <if test="${file::exists(src.file)}">
      <copy file="${src.file}" tofile="${dst.file}" unless="${file::up-to-date(src.file, dst.file)}"/>
    </if>
    <echo message="Warning: '${src.file}' file is missing. It will be replaced by a placeholder !!!" unless="${file::exists(src.file)}"/>
    <touch file="${dst.file}" unless="${file::exists(dst.file)}"/>

    <!-- Create/Embed runtime executables -->
    <foreach item="String" in="10.5,10.6" delim=" ," property="version">
      <mkdir dir="${embedded.dir}/${version}" />

      <property name="src.file" value="${binaries.dir}/${version}/runtime"/>
      <property name="dst.file" value="${embedded.dir}/${version}/runtime"/>
      <if test="${file::exists(src.file)}">
        <copy file="${src.file}" tofile="${dst.file}" unless="${file::up-to-date(src.file, dst.file)}"/>
      </if>
      <echo message="Warning: '${src.file}' file is missing. It will be replaced by a placeholder !!!" unless="${file::exists(src.file)}"/>
      <touch file="${dst.file}" unless="${file::exists(dst.file)}"/>

      <property name="src.file" value="${binaries.dir}/${version}/libmonobjc.dylib"/>
      <property name="dst.file" value="${embedded.dir}/${version}/libmonobjc.dylib"/>
      <if test="${file::exists(src.file)}">
        <copy file="${src.file}" tofile="${dst.file}" unless="${file::up-to-date(src.file, dst.file)}"/>
      </if>
      <echo message="Warning: '${src.file}' file is missing. It will be replaced by a placeholder !!!" unless="${file::exists(src.file)}"/>
      <touch file="${dst.file}" unless="${file::exists(dst.file)}"/>

    </foreach>

  </target>

  <!-- ===============================================================================
  Build the tool libraries
  ================================================================================ -->
  <target name="build" depends="update">
    <echo message="------------------------"/>
    <echo message="Building Tools"/>
    <echo message="------------------------"/>

    <!-- Create the assembly info -->
    <property name="version" value="3.0"/>
    <property name="version.info" value="${build.dir}/GeneratedAssemblyInfo.${version}.${revision}.0.cs"/>
    <asminfo output="${version.info}" language="CSharp" unless="${file::exists(version.info)}">
      <imports>
        <import namespace="System" />
        <import namespace="System.Reflection" />
        <import namespace="System.Runtime.InteropServices" />
      </imports>
      <attributes>
        <attribute type="AssemblyVersionAttribute" value="${version}.${revision}.0" />
        <attribute type="AssemblyFileVersionAttribute" value="${version}.${revision}.0" />
        <attribute type="AssemblyConfigurationAttribute" value="Release Configuration" unless="${testing}"/>
        <attribute type="AssemblyConfigurationAttribute" value="Testing Configuration" if="${testing}"/>
      </attributes>
    </asminfo>

    <!-- Builds tools library -->
    <csc target="library"
       output="${dist.dir}/Monobjc.Tools.dll">
      <sources>
        <include name="${version.info}"/>
        <include name="Monobjc.Tools/**/*.cs"/>
      </sources>
      <resources prefix="Monobjc.Tools.Properties">
        <include name="Monobjc.Tools/**/*.resx"/>
      </resources>
    </csc>

    <!-- Builds NAnt tasks-->
    <csc target="library"
       output="${dist.dir}/Monobjc.NAnt.dll">
      <sources>
        <include name="${version.info}"/>
        <include name="Monobjc.Tools/**/*.cs"/>
        <exclude name="Monobjc.Tools/**/AssemblyInfo.cs"/>
        <include name="Monobjc.NAnt/**/*.cs"/>
      </sources>
      <resources prefix="Monobjc.Tools.Properties">
        <include name="Monobjc.Tools/**/*.resx"/>
      </resources>
      <resources prefix="Monobjc.NAnt.Properties">
        <include name="Monobjc.NAnt/**/*.resx"/>
      </resources>
      <references>
        <include name="${nant::get-base-directory()}/NAnt.Core.dll"/>
        <include name="${nant::get-base-directory()}/NAnt.DotNetTasks.dll"/>
      </references>
    </csc>

    <!-- Builds MSBuild tasks-->
    <csc target="library"
       output="${dist.dir}/Monobjc.MSBuild.dll">
      <sources>
        <include name="${version.info}"/>
        <include name="Monobjc.Tools/**/*.cs"/>
        <exclude name="Monobjc.Tools/**/AssemblyInfo.cs"/>
        <include name="Monobjc.MSBuild/**/*.cs"/>
      </sources>
      <resources prefix="Monobjc.Tools.Properties">
        <include name="Monobjc.Tools/**/*.resx"/>
      </resources>
      <resources prefix="Monobjc.MSBuild.Properties">
        <include name="Monobjc.MSBuild/**/*.resx"/>
      </resources>
      <references>
        <include name="Microsoft.Build.Framework.dll"/>
        <include name="Microsoft.Build.Utilities.dll"/>
      </references>
    </csc>

  </target>

  <!-- Prepare the directories -->
  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${dist.dir}"/>

    <!-- Compute the revision -->
    <property name="revision" value="${timespan::get-days(datetime::now() - datetime::parse('2007-07-01'))}"/>
  </target>

  <!-- Clean the directories -->
  <target name="clean">
    <delete dir="${build.dir}" failonerror="false" />
    <delete dir="${dist.dir}" failonerror="false" />
  </target>

</project>
